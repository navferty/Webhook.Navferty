@page "/Index"
@using System.Net
@using Ganss.Xss
@using Webhook.Navferty
@using Webhook.Navferty.Data
@inject IRequestRepository RequestRepository
@{
    var tenantIdString = Request.Query["tenantId"];
    if (string.IsNullOrWhiteSpace(tenantIdString)
        || !Guid.TryParse(tenantIdString, out var tenantId)
        || tenantId == Guid.Empty)
    {
        throw new ArgumentException("TenantId is required");
    }

    ViewData["Title"] = "Recent Web Requests";
    var requests = await RequestRepository.GetRequests(tenantId, DateTimeOffset.MinValue, DateTimeOffset.MaxValue);
    var sanitizer = new HtmlSanitizer();
}
@section Styles {
    <style>
        /* TODO */
    </style>
}

    <h1>Webhook</h1>

    <p>
        This is a simple webhook service that logs all incoming requests.
    </p>

    <p>
        To make a request, use the following base URL:
    </p>

    <div class="input-group mb-3">
        <input type="text" class="form-control" id="baseUrl" value="https://webhook.navferty.com/@tenantId" readonly style="background-color: lightgray;">
        <button class="btn btn-outline-secondary" type="button" id="copyButton" onclick="copyToClipboard()">Copy</button>
    </div>

    <p>
        This URL contains your unique ID, which is <strong>@tenantIdString</strong>.
        You can use this URL to make requests to the webhook service.
    </p>

    <p>
        You can construct any url and use any HTTP method, for example:
        <code>POST https://webhook.navferty.com/@tenantId/any/path/you/want</code>
    </p>

    <p>
        Below are sample scripts for curl, PowerShell and C# to make a request to the webhook service:
        <details>
            <summary>Sample Scripts</summary>

            <h3>cURL</h3>
            <div class="code-block">
                <button type="button" class="copy-code-btn" onclick="copyCode(this)">Copy</button>
                <pre><code class="language-bash">
curl -X POST "https://webhook.navferty.com/@tenantId/example" \
    -H "Content-Type: application/json" \
    -d '{"key":"value"}'
                </code></pre>
            </div>

            <h3>PowerShell</h3>
            <div class="code-block">
                <button type="button" class="copy-code-btn" onclick="copyCode(this)">Copy</button>
                <pre><code class="language-powershell">
$tenantId = "@tenantIdString"
$url = "https://webhook.navferty.com/$tenantId/example"
$body = @@{
    key = "value"
} | ConvertTo-Json
Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType "application/json"
                </code></pre>
            </div>

            <h3>C#</h3>
            <div class="code-block">
                <button type="button" class="copy-code-btn" onclick="copyCode(this)">Copy</button>
                <pre><code class="language-csharp">
using System;
using System.Net.Http;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        var tenantId = "@tenantIdString";
        var url = $"https://webhook.navferty.com/{tenantId}/example";
        var content = new StringContent("{\"key\":\"value\"}", Encoding.UTF8, "application/json");
        using (var client = new HttpClient())
        {
            var response = await client.PostAsync(url, content);
            response.EnsureSuccessStatusCode();
            Console.WriteLine(await response.Content.ReadAsStringAsync());
        }
    }
}
                </code></pre>
            </div>
        </details>
    </p>

    <p>
        The service will log the request, including the path, method, query string, headers, and body.
        You can view the recent requests below. Keep the Id @tenantId to view your requests.
    </p>

    <p>
        You can also configure responses for specific paths, which will return pre-defined responses
        when the webhook is triggered. Response can be configured to return JSON, plain text, or HTML content.
        <a href="/ConfigureResponses?tenantId=@tenantId">Configure Responses</a>
    </p>

    <h3>Recent Web Requests</h3>

    @if (requests == null || !requests.Any())
    {
        <p>No requests recorded yet.</p>
    }
    else
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>Method</th>
                    <th>Path</th>
                    <th>Created At</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var request in requests)
                {
                    <tr>
                        <td><a href="/requestdetails/@request.Id?tenantId=@tenantId">@request.Id</a></td>
                        <td>@request.Method</td>
                        <td>@sanitizer.Sanitize(WebUtility.UrlDecode(request.Path))</td>
                        <td>@request.CreatedAt</td>
                    </tr>
                }
            </tbody>
        </table>
}

@section Scripts {
    <script>
        function copyToClipboard() {
            var copyText = document.getElementById("baseUrl");
            var actualUrl = copyText.value.replace("@tenantId", "@tenantIdString");
            navigator.clipboard.writeText(actualUrl).then(function() {
                var copyButton = document.getElementById("copyButton");
                copyButton.textContent = "Copied";
                setTimeout(function() {
                    copyButton.textContent = "Copy";
                }, 5000);
            }, function(err) {
                console.error("Could not copy text: ", err);
            });
        }

        function copyCode(btn) {
            var pre = btn.parentElement.querySelector('pre');
            var code = pre.innerText;
            navigator.clipboard.writeText(code).then(function() {
                btn.textContent = "Copied!";
                setTimeout(function() {
                    btn.textContent = "Copy";
                }, 2000);
            }, function(err) {
                btn.textContent = "Failed";
                setTimeout(function() {
                    btn.textContent = "Copy";
                }, 2000);
            });
        }

        function adjustInputWidth() {
            var input = document.getElementById("baseUrl");
            var tempSpan = document.createElement("span");
            tempSpan.style.visibility = "hidden";
            tempSpan.style.whiteSpace = "nowrap";
            tempSpan.style.fontSize = getComputedStyle(input).fontSize;
            tempSpan.style.fontFamily = getComputedStyle(input).fontFamily;
            tempSpan.innerText = input.value;
            document.body.appendChild(tempSpan);
            input.style.width = (tempSpan.offsetWidth + 15) + "px";
            document.body.removeChild(tempSpan);
        }

        document.addEventListener("DOMContentLoaded", adjustInputWidth);
    </script>
}
